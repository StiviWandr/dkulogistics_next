import { Id, ToastContent, ToastOptions, toast } from "react-toastify"


const styles: ToastOptions<{}> | undefined = {
    position: "bottom-right",
    autoClose: 3500,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    progress: undefined,
    theme: "light",
}

export const randomNotifyMessages = ["–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ", "–ì–æ–Ω—è–µ–º –≥–æ–ª—É–±–µ–π", "–ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –∫–∞–±–µ–ª—å—â–∏–∫–æ–≤", "–°–æ–µ–¥–∏–Ω—è–µ–º —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–º", "–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ú–∞—Ä—Å–∞", "–°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ", "–í–∑–ª–∞–º—ã–≤–∞–µ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω"]
export const getRandomNotifyMessage = () => randomNotifyMessages[Math.floor(Math.random() * randomNotifyMessages.length)]

export const createLoadingNotify = (message: ToastContent<unknown>, newStyles?: ToastOptions<{}> | undefined): Id => toast.loading(message, { ...styles, ...newStyles })
export const closeLoadingNotify = (id: Id) => toast.done(id)
export const createErrorNotify = (message: ToastContent<unknown>) => toast.error(message + ' üòØ', { ...styles, toastId: 'unique_id' })
export const createWarningNotify = (message: ToastContent<unknown>) => toast.warning(message + ' üòØ', { ...styles, toastId: 'unique_id' })
export const createFetchingNotify = (myPromise: Promise<unknown> | (() => Promise<unknown>), messages?: { pending?: string, error?: string, success?: string }) => {
    toast.promise(myPromise, {
        pending: messages?.pending || '–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        error: messages?.error || '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
        success: messages?.success || "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    }, styles)
}

